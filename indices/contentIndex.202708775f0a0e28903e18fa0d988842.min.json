{"/":{"title":"Digital Garden ü™¥","content":"\n# Welcome in my Digital Garden ü™¥\nI'm happy to welcome you to my garden!\n\nI love learning, testing and discovering new things, related to the world of data that is dear to me, or not. But it was quite frustrating because, over time, things would slip out of my mind replaced by other discoveries, not lost forever, but much harder to retrieve and share!\n\nAnd then I read Jacky's [Networked Thought](https://jzhao.xyz/posts/networked-thought) page sharing his [Quartz](https://github.com/jackyzha0/quartz) project, it gave me the tool I'd been missing, being able to document, create my garden full of seeds to grow and share with anyone interested üåª.\n\n\n## My garden ü•ï\nI'm just at the beginning of my garden, the land is still uncultivated, and I don't know where I will put the vegetable patch, how I will organize my plots, which trees and flowers I will be able to plant, and how they will grow! So, we will start by drawing inspiration from the neighbors.\n\n### #Seeds\n\nI tend to generally bookmark things for later then revisit them when I have time. For [ideas list](thoughts/bag%20of%20seeds.md), writing, and all sorts of reading. Even when reading books, I don‚Äôt like to take complex notes right away will only bookmark or highlight phrases. I will eventually come back to the bookmarks a second time to generate insights and actual thoughts. It feels like this weeds out unnecessary noise and provides a natural chance for spaced repetition.\n\nThese are the seeds that form the basis of ideas and thoughts.\n\n### #Saplings\n\nSaplings are single nodes or thoughts.\n\n### #Fruits\n\nOf course, a knowledge index isn‚Äôt much use if it doesn‚Äôt inform future thinking and output. Fruits are derivative or ‚Äônew‚Äô pieces of content.\n\nIt‚Äôs the act of creating ‚Äônewer‚Äô work from saplings, mostly longer form #posts, [projects](thoughts/projects.md), etc. At this stage, thoughts and ideas have matured enough to be able to share and collaborate.\n\n\n## Let's take a digital coffee ‚òï\n\n\u003e [!info]\n\u003e Feel free to join our [Slack channel](https://join.slack.com/t/konpytika/shared_invite/zt-14md072lv-Jr8mqYoeUrqzfZF~YGUpXA) for a chat ü§ó\n","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/private/doctolib/code/.gitkeep":{"title":"","content":"","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/private/doctolib/meets/.gitkeep":{"title":"","content":"","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/private/doctolib/scoping/.gitkeep":{"title":"","content":"","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/private/doctolib/term/.gitkeep":{"title":"","content":"","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/thoughts/Apache-NiFi":{"title":"Apache NiFi","content":"","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/thoughts/Kubernetes":{"title":"Kubernetes","content":"","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/thoughts/NiFiKop":{"title":"NiFiKop","content":"\nIt is is an open-source [Kubernetes operator](thoughts/kubernetes%20operator.md) that makes it¬†easy¬†to run [Apache NiFi](thoughts/Apache%20NiFi.md) on [Kubernetes](thoughts/Kubernetes.md).","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/thoughts/aws-vpc":{"title":"AWS VPC","content":"\nWith Amazon Virtual Private Cloud (Amazon VPC), you can launch AWS resources in a logically isolated virtual network that you've defined. This virtual network closely resembles a traditional network that you'd operate in your own data center, with the benefits of using the scalable infrastructure of AWS.\n\nThe following diagram shows an example VPC. The VPC has one subnet in each of the Availability Zones in the Region, EC2 instances in each subnet, and an internet gateway to allow communication between the resources in your VPC and the internet.\n\n![](thoughts/images/aws_vpc.png)","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/thoughts/aws-vpc-cni":{"title":"AWS VPC CNI","content":"[Container Network Inteface Plugin](thoughts/container%20network%20inteface%20plugin.md)¬†using [elastic network interfaces](thoughts/elastic%20network%20interfaces.md)¬†on AWS.\n#aws\n\n## Overlay network\nThe first one is the overlay network used for communication and encapsulating the packets over the network. In this case, the encapsulating is taking place at the hardware level using #aws [ENI](thoughts/elastic%20network%20interfaces.md) inside a [VPC](thoughts/aws%20vpc.md).\n\n![](thoughts/images/pod_networking_amazon_vpc_cni.png)\n\nThe plugin support two modes when it comes to manage IP addresses management for pods:\n\n- [Prefix mode](https://aws.github.io/aws-eks-best-practices/networking/prefix-mode/index_linux/ \"https://aws.github.io/aws-eks-best-practices/networking/prefix-mode/index_linux/\"): allows [Kubernetes](thoughts/Kubernetes.md) Pods to have the same IP address as they do on the [VPC](thoughts/aws%20vpc.md) network. More specifically, all containers inside the Pod share a network namespace, and they can communicate with each-other using local ports.\n- [Secondary IP mode](https://aws.github.io/aws-eks-best-practices/networking/vpc-cni/#overview \"https://aws.github.io/aws-eks-best-practices/networking/vpc-cni/#overview\"): when a worker node is provisioned, it has a default [ENI](thoughts/elastic%20network%20interfaces.md), called the primary [ENI](thoughts/elastic%20network%20interfaces.md), attached to it. The [CNI](thoughts/container%20network%20inteface%20plugin.md) allocates a warm pool of [ENIs](thoughts/elastic%20network%20interfaces.md) and secondary IP addresses from the subnet attached to the node‚Äôs primary [ENI](thoughts/elastic%20network%20interfaces.md). By default, IPAMD (a long-running node-local IP Address Management daemon and is responsible for) attempts to allocate an additional [ENI](thoughts/elastic%20network%20interfaces.md) to the node. The IPAMD allocates additional [ENI](thoughts/elastic%20network%20interfaces.md) when a single Pod is scheduled and assigned a secondary IP address from the primary [ENI](thoughts/elastic%20network%20interfaces.md). This \"warm\" [ENI](thoughts/elastic%20network%20interfaces.md) enables faster Pod networking. As the pool of secondary IP addresses runs out, the [CNI](thoughts/container%20network%20inteface%20plugin.md) adds another [ENI](thoughts/elastic%20network%20interfaces.md) to assign more.\n\n## Flow traffic control\nIn #aws a [Security Group (SG)](thoughts/security%20group.md) acts as a virtual firewall for EC2 instances to control inbound and outbound traffic. By default the Amazon [VPC](thoughts/aws%20vpc.md) CNI will use [SGs](thoughts/security%20group.md) associated with the primary[ENI](thoughts/elastic%20network%20interfaces.md)  on the node. Which means that every Pod on a node shares the same security groups as the node it runs on.\n![](thoughts/images/aws_vpc_cni_node_security_group.png)\nWith [Security Group for Pods](https://aws.github.io/aws-eks-best-practices/networking/sgpp/ \"https://aws.github.io/aws-eks-best-practices/networking/sgpp/\"), multiple types of security rules, such as Pod-to-Pod and Pod-to-External AWS services, can be defined in a single place with EC2 security groups and applied to workloads with Kubernetes native APIs.\n\n![](thoughts/images/aws_security_group_for_pods.png)\nTo enable the Security Groups for pod we have to set `ENABLE_POD_ENI = true` for VPC CNI. Once done, for each node in the cluster the add-on adds a label with the value `vpc.amazonaws.com/has-trunk-attached=true`. The [VPC Resource Controller](https://github.com/aws/amazon-vpc-resource-controller-k8s \"https://github.com/aws/amazon-vpc-resource-controller-k8s\") running on the control plane creates and attaches a trunk interface called ‚Äúaws-k8s-trunk-eni‚Äù to the node. It acts as a standard network interface attached to the instance.\n\nThe controller also creates branch interfaces named \"aws-k8s-branch-eni\" and associates them with the trunk interface. Pods are assigned a security group using the [SecurityGroupPolicy](https://github.com/aws/amazon-vpc-resource-controller-k8s/blob/master/config/crd/bases/vpcresources.k8s.aws_securitygrouppolicies.yaml \"https://github.com/aws/amazon-vpc-resource-controller-k8s/blob/master/config/crd/bases/vpcresources.k8s.aws_securitygrouppolicies.yaml\") custom resource and are associated with a branch interface. Since security groups are specified with network interfaces, we are now able to [schedule Pods requiring specific security groups](https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html#sg-pods-example-deployment \"https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html#sg-pods-example-deployment\") on these additional network interfaces.\n\n![](thoughts/images/aws_security_group_for_pods_branch_eni.png)\n\n\u003e [!warning] \n\u003e Branch interface capacity is _additive_ to existing instance type limits for secondary IP addresses. Pods that use security groups are not accounted for in the max-pods formula and when you use security group for pods you need to consider [raising the max-pods](https://docs.aws.amazon.com/eks/latest/userguide/cni-increase-ip-addresses.html \"https://docs.aws.amazon.com/eks/latest/userguide/cni-increase-ip-addresses.html\") value or be ok with running fewer pods than the node can actually support.\n\n#### Recommandation\n\nSome highlights on recommandations using this feature:\n\n\u003e[!info]   [Disable TCP Early Demux for Liveness Probe](https://aws.github.io/aws-eks-best-practices/networking/sgpp/#disable-tcp-early-demux-for-liveness-probe \"https://aws.github.io/aws-eks-best-practices/networking/sgpp/#disable-tcp-early-demux-for-liveness-probe\")\n\u003e\n\u003eIf are you using liveness or readiness probes, you also need to disable TCP early demux, so that the kubelet can connect to Pods on branch network interfaces via TCP\n\n\u003e [!info] [Supporting Kubernetes Network Policy](https://aws.github.io/aws-eks-best-practices/networking/sgpp/#enforcing-mode-use-standard-mode-in-the-following-situations \"https://aws.github.io/aws-eks-best-practices/networking/sgpp/#enforcing-mode-use-standard-mode-in-the-following-situations\")\n\u003e \n\u003e We recommend using standard enforcing mode when using network policy with Pods that have associated security groups.\n\u003e\n\u003eWe strongly recommend to utilize security groups for Pods to limit network-level access to AWS services that are not part of a cluster. Consider [network policies](thoughts/network%20policies.md) to restrict network traffic between Pods inside a cluster, often known as East/West traffic.\n\n\u003e [!info] [Deploy pods with Security Groups to Private Subnets](https://aws.github.io/aws-eks-best-practices/networking/sgpp/#deploy-pods-with-security-groups-to-private-subnets \"https://aws.github.io/aws-eks-best-practices/networking/sgpp/#deploy-pods-with-security-groups-to-private-subnets\")\n\u003e \n\u003e Pods that are assigned security groups must be run on nodes that are deployed on to private subnets. Note that Pods with assigned security groups deployed to public subnets will not able to access the internet.\n\n## Setup\nWhen you create a new EKS cluster the Amazon VPC CNI is now installed by default as a managed add-on. But on our cluster they have been installed in self-managed mode.\n\nThere is two different approaches to install it:\n- [Update the self-managed add-on](https://docs.aws.amazon.com/eks/latest/userguide/managing-vpc-cni.html#vpc-add-on-self-managed-update \"https://docs.aws.amazon.com/eks/latest/userguide/managing-vpc-cni.html#vpc-add-on-self-managed-update\")\n- [Switch to the Amazon EKS add-on](https://docs.aws.amazon.com/eks/latest/userguide/managing-vpc-cni.html#vpc-add-on-create \"https://docs.aws.amazon.com/eks/latest/userguide/managing-vpc-cni.html#vpc-add-on-create\")\n\n|**Pros**|**Cons**|\n|---|---|\n|VPC CNI uses Native VPC networking, which results in high performance and is also highly scalable|Need to add another CNI plugin to manage network policies|\n|Support to configure POD security groups, which allows or denies access to POD both from external and internal|No solution to control traffic flow based on fqdn|\n|Support of secondary CIDR IP ranges, so that PODs can have more IPs from secondary subnet||\n\n## Links","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/thoughts/bag-of-seeds":{"title":"Bag of seeds üå±","content":"\n","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/thoughts/container-network-inteface-plugin":{"title":"Container Network Interface plugin","content":"\n[Kubernetes](thoughts/Kubernetes.md) does not implement such things as mulit-host networking (i.e. Pod-to-Pod communication across nodes). The Container Network Interface (CNI) is a framework for dynamically configuring network resources. \n\nThe plugin specification defines an interface for configuring network, provisioning IP addreses, and maintaining connectivity with multiple hosts:\n- Pods have their own IP addresses\n- Nodes manages pod subnets and allocates pod IPs locally\n- The communication/access from one pod to another pod is through CNI (L2 bridge)\n- The CNI plugin creates interface, used as interface between container runtime and network, and to configure network routes.\n- The interface communicates to another node through an overlay network ([VXLAN](https://en.wikipedia.org/wiki/Virtual_Extensible_LAN \"https://en.wikipedia.org/wiki/Virtual_Extensible_LAN\"), [BGP](https://en.wikipedia.org/wiki/Border_Gateway_Protocol \"https://en.wikipedia.org/wiki/Border_Gateway_Protocol\") etc.) \n\n![Pod networking and communication](thoughts/images/pod_networking_communication.png)\n\n\n## Links\n\n\n","lastmodified":"2023-08-03T10:51:53.019160401Z","tags":null},"/thoughts/elastic-network-interfaces":{"title":"Elastic Network interfaces","content":"\nAn¬†_elastic network interface_¬†is a logical networking component in a [VPC](thoughts/aws%20vpc.md) that represents a virtual network card. It can include the following attributes:\n- A primary private IPv4 address from the IPv4 address range of your [VPC](thoughts/aws%20vpc.md)\n- One or more secondary private IPv4 addresses from the IPv4 address range of your VPC\n- One Elastic IP address (IPv4) per private IPv4 [VPC](thoughts/aws%20vpc.md)\n- One public IPv4 address\n- One or more IPv6 addresses\n- One or more security groups\n- A MAC address\n- A source/destination check flag\n- A description\n\nWe can create and configure network interfaces and attach them to instances in the same Availability Zone. The account might also have¬†_requester-managed_¬†network interfaces, which are created and managed by AWS services to enable us to use other resources and services. We cannot manage these network interfaces ourself.","lastmodified":"2023-08-03T10:51:53.02316078Z","tags":null},"/thoughts/github-actions":{"title":"Github Actions","content":"[how to access private repositories from GA](thoughts/how%20to%20access%20private%20repositories%20from%20GA.md)","lastmodified":"2023-08-03T10:51:53.02316078Z","tags":null},"/thoughts/how-to-access-private-repositories-from-GA":{"title":"How to access private repositories from Github Actions?","content":"\nWhen running in [Github Actions](thoughts/github%20actions.md), the private repositories can not be accessed since the runners is not configured to access the private repositories.\n\n## The solution\n\nSince the private repositories that my app depending on are mine as well, therefore I can add the required configuration into those private repositories with the action [ssh-agent](https://github.com/webfactory/ssh-agent)\n\nThe following steps are required to setup the SSH keys for the runner during runtime to access the private repositories:\n\n- Create SSH key for the private repositories by running¬† `ssh-keygen -C \"git@github.com:erdrix/digital-garden-git.git\"`¬†.\n- Put the public key as deployment key into the private repository.\n- Put the private key as a secret into the main repository.\n- Change your action a bit\n\n```yaml\n# Make sure the @v0.7.0 matches the current version of the action\n- uses: webfactory/ssh-agent@v0.7.0\n  with:\n    ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_CONTENT }}\n\n- uses: actions/checkout@v3\n  with:\n    submodules: recursive # this is important not to forget\n```\n\n","lastmodified":"2023-08-03T10:51:53.02316078Z","tags":null},"/thoughts/kubernetes-operator":{"title":"Kubernetes Operator","content":"","lastmodified":"2023-08-03T10:51:53.027161159Z","tags":null},"/thoughts/network-policies":{"title":"Network policies","content":"\n[Kubernetes](thoughts/Kubernetes.md) Network policies are an application-centric construct which allow you to specify how a pod is allowed to communicate with various network ‚Äúentities‚Äù (endpoints, services) over the network.\n\n```yaml\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: test-network-policy\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      role: db\n  policyTypes:\n    - Ingress\n    - Egress\n  ingress:\n    - from:\n        - ipBlock:\n            cidr: 172.17.0.0/16\n            except:\n              - 172.17.1.0/24\n        - namespaceSelector:\n            matchLabels:\n              project: myproject\n        - podSelector:\n            matchLabels:\n              role: frontend\n      ports:\n        - protocol: TCP\n          port: 6379\n  egress:\n    - to:\n        - ipBlock:\n            cidr: 10.0.0.0/24\n      ports:\n        - protocol: TCP\n          port: 5978\n\n```\n\n## Links\n- [Network Policies | Kubernetes](https://kubernetes.io/docs/concepts/services-networking/network-policies/)\n","lastmodified":"2023-08-03T10:51:53.027161159Z","tags":null},"/thoughts/osi-model-layers":{"title":"OSI model layers","content":"\nOSI stands for Open Systems Interconnection. It is a 7-layer architecture with each layer having specific functionality to perform. All these 7 layers work collaboratively to transmit the data from one perso to another across the globe.\n\n![OSI model layers](thoughts/images/osi_model_layers.png)\n\n- **\\[L3\\] Network Layer:** handles addressing, routing, and packet transmission between different networks. It assigns IP addresses, routes data packets, and ensures efficient communication across networks. _For Kubernetes it is translated by the fact that we assign unique IP addresses to pods and enables communication between them within a cluster.\n- **\\[L4\\] Transport Layer:** responsible for managing reliable and efficient communication between devices. It uses protocols like TCP for reliable and ordered data transfer, and UDP for fast, connectionless communication. It handles data segmentation, encapsulation, and ensures reliable delivery when needed. _For Kubernetes it manages communication between pods using protocols and ports to each pod.\n- **\\[L7\\] Application Layer:** focuses on application-level interactions. It handles application-specific protocols, performs tasks like protocol identification, message segmentation, encryption, routing, load balancing, caching, and content delivery. _For Kubernetes it provides service discovery, load balancing, routing, API management._\n\n## Links\n\n\n","lastmodified":"2023-08-03T10:51:53.027161159Z","tags":null},"/thoughts/projects":{"title":"Projects","content":"\n# NiFiKop - A Kubernetes operator for Apache NiFi\n[NiFiKop](thoughts/NiFiKop.md), is an open-source Kubernetes operator that makes it¬†easy¬†to run Apache NiFi on Kubernetes. \n\n[Github](https://github.com/konpyutaika/nifikop), [Documentation](https://konpyutaika.github.io/nifikop/)","lastmodified":"2023-08-03T10:51:53.027161159Z","tags":null},"/thoughts/security-group":{"title":"Security group","content":"\nA security group acts as a firewall that controls the traffic allowed to and from the resources in your [virtual private cloud (VPC)](thoughts/aws%20vpc.md). You can choose the ports and protocols to allow for inbound traffic and for outbound traffic.\n\nFor each security group, you add separate sets of rules for inbound traffic and outbound traffic.","lastmodified":"2023-08-03T10:51:53.027161159Z","tags":null}}